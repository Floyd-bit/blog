(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{639:function(t,e,n){"use strict";n.r(e);var a=n(11),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"_1-历史版本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-历史版本"}},[t._v("#")]),t._v(" 1. 历史版本")]),t._v(" "),n("p",[t._v("React-Router V6")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("组件名")]),t._v(" "),n("th",[t._v("作用")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("<Routers>")])]),t._v(" "),n("td",[t._v("一组路由")]),t._v(" "),n("td",[t._v("代替原有"),n("code",[t._v("<Switch>")]),t._v("，所有子路由都用基础的Router children来表示")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("<Router>")])]),t._v(" "),n("td",[t._v("基础路由")]),t._v(" "),n("td",[t._v("Router是可以嵌套的，解决原有V5中严格模式，后面与V5区别会详细介绍")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("<Link>")])]),t._v(" "),n("td",[t._v("导航组件")]),t._v(" "),n("td",[t._v("在实际页面中跳转使用")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("<Outlet/>")])]),t._v(" "),n("td",[t._v("自适应渲染组件")]),t._v(" "),n("td",[t._v("根据实际路由url自动选择组件")])])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("hooks名")]),t._v(" "),n("th",[t._v("作用")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("useParams")])]),t._v(" "),n("td",[t._v("返回当前参数")]),t._v(" "),n("td",[t._v("根据路径读取参数")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("useNavigate")])]),t._v(" "),n("td",[t._v("返回当前路由")]),t._v(" "),n("td",[t._v("代替原有V5中的 useHistory")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("useOutlet")])]),t._v(" "),n("td",[t._v("返回根据路由生成的element")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[n("code",[t._v("useLocation")])]),t._v(" "),n("td",[t._v("返回当前的location 对象")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[n("code",[t._v("useRoutes")])]),t._v(" "),n("td",[t._v("同Routers组件一样，只不过是在js中使用")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[n("code",[t._v("useSearchParams")])]),t._v(" "),n("td",[t._v("用来匹配URL中?后面的搜索参数")]),t._v(" "),n("td")])])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('     <Routes>\n       \x3c!-- index指定默认子路由 --\x3e\n       <Route index path="/" element={<Home />} />\n       <Route path="about" element={<About />} />\n       \x3c!-- 嵌套路由 --\x3e\n       <Route path="users" element={<User />}>\n         <Route path=":id" element={<UserDetail />} />\n         <Route path="create" element={<NewUser />} />\n       <Route />\n     </Routes>\n')])])]),n("p",[t._v("React-Router V5")]),t._v(" "),n("ul",[n("li",[t._v("使用<Route>组件")]),t._v(" "),n("li",[t._v("结合使用<Switch>和<Route>组件")]),t._v(" "),n("li",[t._v("使用<Link>、<Redirect>组件")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('     <Switch>\n       <Route exact path="/">\n         <Home />\n       </Route>\n       <Route path="/about">\n         <About />\n       </Route>\n       <Route path="/users/:id" children={<User />} />\n     </Switch>\n')])])]),n("p",[t._v("React-Router V3")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const App = () => (\n  <Router\n    routes={[\n      { path: '/home', component: <Home /> },\n      { path: '/articles', component: <Articles /> }\n    ]}\n  />\n)\n\nconst Home = () => (\n  <div>\n    home, <Link href=\"/articles\">go articles</Link>,\n    <span onClick={() => navigate('/details')}>or jump to details</span>\n  </div>\n)\n")])])]),n("h3",{attrs:{id:"_2-v3版本源码解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-v3版本源码解析"}},[t._v("#")]),t._v(" 2. V3版本源码解析")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Router")]),t._v(" "),n("p",[t._v("分析：Router需要接收routes参数，根据当前url地址判断渲染哪个组件；当url地址变化时，渲染新的url对应的组件")]),t._v(" "),n("p",[t._v("实现：使用history路由时，浏览器的前进后退或地址栏输入url会触发popstate事件。Router在state中保存当前的url，并监听popstate事件，当路由改变时更新state，返回对应的组件并渲染。")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export default function Router ({ routes }) {\n  // 存储当前 url path，方便其变化时引发自身重渲染，以返回新的 url 对应的组件\n  const [currentPath, setCurrentPath] = useState(window.location.pathname);\n\n  useEffect(() => {\n    const onLocationChange = () => {\n      // 将 url path 更新到当前数据流中，触发自身重渲染\n      setCurrentPath(window.location.pathname);\n    }\n\n    // 监听 popstate 事件，该事件由用户点击浏览器前进/后退时触发\n    window.addEventListener('popstate', onLocationChange);\n\n    return () => window.removeEventListener('popstate', onLocationChange)\n  }, [])\n\n  // 找到匹配当前 url 路径的组件并渲染\n  return routes.find(({ path, component }) => path === currentPath)?.component\n}\n")])])])]),t._v(" "),n("li",[n("p",[t._v("navigate, 调用式函数")]),t._v(" "),n("p",[t._v("实现：使用单页跳转API history.pushState, 须手动触发popstate事件")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export function navigate (href) {\n  // 用 pushState 直接刷新 url，而不触发真正的浏览器跳转\n  window.history.pushState({}, \"\", href);\n\n  // 手动触发一次 popstate，让 Route 组件监听并触发 onLocationChange\n  const navEvent = new PopStateEvent('popstate');\n  window.dispatchEvent(navEvent);\n}\n")])])])]),t._v(" "),n("li",[n("p",[t._v("Link，内置navigate能力的a标签，并且当按住ctrl时打开新tab页(a标签默认行为)")]),t._v(" "),n("p",[t._v("实现：利用a标签实现，正常点击时阻止a标签默认行为并触发navigate函数，按住ctrl时默认执行")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export function Link ({ className, href, children }) {\n  const onClick = (event) => {\n    // mac 的 meta or windows 的 ctrl 都会打开新 tab\n    // 所以此时不做定制处理，直接 return 用原生行为即可\n    if (event.metaKey || event.ctrlKey) {\n      return;\n    }\n\n    // 否则禁用原生跳转\n    event.preventDefault();\n\n    // 做一次单页跳转\n    navigate(href)\n  };\n\n  return (\n    <a className={className} href={href} onClick={onClick}>\n      {children}\n    </a>\n  );\n};\n")])])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);