(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{655:function(t,a,s){"use strict";s.r(a);var n=s(11),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前端框架概况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端框架概况"}},[t._v("#")]),t._v(" 前端框架概况")]),t._v(" "),s("h2",{attrs:{id:"_1-why-framework"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-why-framework"}},[t._v("#")]),t._v(" 1. Why framework?")]),t._v(" "),s("p",[t._v("​\t我们知道前端其实就是使用HTML(页面结构)+CSS(样式)+JavaScript(交互逻辑)来写的。在刚刚接触前端时，我们会跟着教程新建一个Html文件，然后在head标签中引入css文件或者直接使用内联样式，直接在浏览器中打开html文件就可以看到一个有简单样式的网页了。大概的代码类似这样：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("lang")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("en"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("charset")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("UTF-8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("X-UA-Compatible"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("IE=edge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("width=device-width, initial-scale=1.0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Document"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello World!"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("​\t用这样的方式去写一个简单的网页或许还可以接受，但是试想我们要开发一个复杂的前端应用(如富文本编辑器、在线文档、复杂B端)，难道我们要给每个页面写一个html然后再编写样式吗？显然我们需要一些框架工具来编写复杂的Web程序。前端框架的发展其实经历了很多个阶段：")]),t._v(" "),s("h3",{attrs:{id:"_1-1-jsp时代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-jsp时代"}},[t._v("#")]),t._v(" 1.1 JSP时代")]),t._v(" "),s("p",[t._v("​\t在早期的Web开发中，前端网页的工作往往由后端程序员来完成，也就是"),s("code",[t._v("前后端不分离")]),t._v("。如果有Java后端的学习经验，那么你一定听说过JSP，它是一种模板引擎(在Html文件中加入Java代码和JSP标签)。JSP相当于MVC中的View层，而交互逻辑则可以使用Servlet处理，后端从数据库中取到数据然后经过处理注入到JSP中最后输出Html。在这种模式中，"),s("code",[t._v("渲染是由服务端进行的")]),t._v("，前后端代码耦合在一起，且由于每次页面更新都相当于重新渲染Html，用户体验比较糟糕，还增加了服务端的压力。")]),t._v(" "),s("h3",{attrs:{id:"_1-2-jquery时代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-jquery时代"}},[t._v("#")]),t._v(" 1.2 JQuery时代")]),t._v(" "),s("p",[t._v("​\tAJAX("),s("strong",[t._v("A")]),t._v("synchronous "),s("strong",[t._v("J")]),t._v("avaScript "),s("strong",[t._v("A")]),t._v("nd "),s("strong",[t._v("X")]),t._v("ml,  事实上现在Ajax一般使用JSON或纯文本传输) 技术的出现改变了Web开发的模式。Ajax允许通过与后端交互来部分更新网页，而不是重新加载整个页面，而这给客户端渲染提供了可能。JQuery是一个JavaScript函数库，它提供了简单的函数来获取Html元素、绑定事件、css操作和动画等等。其实JQuery不能称为一个框架，我们本质上只是用它来简化一些DOM操作、CSS操作以及AJAX请求，在开发思想上还是"),s("code",[t._v("命令式")]),t._v("。比如下面的例子：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("btn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("点赞"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(">\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(">\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 命令式的写法：按照逻辑一步一步地执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isStar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.btn'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    isStar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isStar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手动获取到DOM元素，再更新innerHtml的值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.text'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHtml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" isStar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'取消'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'点赞'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("​\t命令式的写法会使得程序的维护变得十分困难，当程序的规模逐渐变大，代码的复杂度会大大提高。")]),t._v(" "),s("h3",{attrs:{id:"_1-3-数据驱动框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数据驱动框架"}},[t._v("#")]),t._v(" 1.3 数据驱动框架")]),t._v(" "),s("p",[t._v("​\t事实上，我们可以把以上的例子中的命令式操作进行抽象，其实只有两步—— 1. 维护页面状态（也就是isStar， 判断当前按钮的点击状态） 2. 根据状态改变DOM。 基于这样的思考，数据驱动的框架就应运而生。数据驱动的思想可以用 "),s("code",[t._v("UI = f(state)")]),t._v("这个公式来进行概括，state即页面的状态，当state改变时对应的UI也会被更新，而前端框架要做的事情就是监测状态的改变然后更新DOM，时下最流行的框架"),s("code",[t._v("Vue")]),t._v("和"),s("code",[t._v("React")]),t._v("都是数据驱动的框架。")]),t._v(" "),s("p",[t._v("​\t不同于命令式的开发模式，Vue和React都采用声明式的方式来描述DOM。尽管两者在实现形式上有所不同（Vue使用模板语法，React使用JSX），但本质上都是用声明式的方式来将状态与视图关联起来。开发者只需要关心状态的维护就可以很好地组织页面的渲染和更新逻辑，我们不需要再去关注DOM的操作，框架会帮我们自动更新DOM。不同的框架实现数据驱动视图的方式都不尽相同，但基本上可以分为两种方式，一种是细粒度地监测每个状态的变化，然后去更新依赖此状态的视图，代表性的框架就是Vue；另一种则不关心具体哪个状态发生了改变，当有状态发生了改变，就去重新渲染页面（当然React通过VDOM Diff等手段做了优化）。下面我们就来具体了解一下这两个框架的更多细节。")]),t._v(" "),s("h2",{attrs:{id:"_2-现代化前端框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-现代化前端框架"}},[t._v("#")]),t._v(" 2. 现代化前端框架")]),t._v(" "),s("h3",{attrs:{id:"_2-1-vue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-vue"}},[t._v("#")]),t._v(" 2.1 Vue")]),t._v(" "),s("p",[t._v("​\tVue 是基于数据的 watch 的，通过 Object.defineProperty （Vue3中使用ES6的Proxy）监听对象属性的变化，并重写数组的 api 监听数组元素的变化，之后进行 dom 的更新。具体而言，Vue通过Object.defineProperties方法劫持了响应式数据的getter和setter，模板中引用数据的地方会触发getter，Vue就会将Watcher添加到依赖数组中。当响应式数据更新的时候会触发setter, 此时会遍历依赖数组，执行Watcher中的update方法去更新VDOM。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/41419ba65a96fdf5977037b9b39a860f.png",alt:"640?wx_fmt=other"}})]),t._v(" "),s("p",[t._v("​\t从开发者角度来看，由于Vue响应式更新的特性只会更新状态变化所影响的视图，所以开发者的心智负担比较小，也就是说我们不用考虑太多性能方面的问题。此外，Vue使用模板的方式来声明视图，这对于熟悉Html的初学者来说更容易上手，配合v-if、v-for、v-bind、v-on等指令可以完成绝大多数业务需求(当然模板也有缺点)。值得一提的是，由于 Vue 是组件级别的数据 watch，当组件内部监听数据变化的地方特别多的时候，一次更新可能计算量特别大，计算量大了就可能会导致丢帧，也就是渲染的卡顿。所以在开发时尽量把大组件拆成小组件，这样每个数据就不会有太多的 watcher 了。")]),t._v(" "),s("h3",{attrs:{id:"_2-3-react"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-react"}},[t._v("#")]),t._v(" 2.3 React")]),t._v(" "),s("p",[t._v("​\tReact则不会对状态进行检查，只要调用了setState就会重新渲染。那么不检查难道每次都渲染全部的 dom 么？也不是，不检查是因为不直接渲染到 dom，而是中间加了一层虚拟 dom，每次都渲染成这个虚拟 dom，然后 diff 下渲染出的虚拟 dom 是否变了，变了的话就去更新对应的 dom。react 并不监听数据的变化，而是渲染出整个虚拟 dom，然后 diff。正因为React中状态的变化(组件本身State的变化或是Props的变化)都会引起此组件和子组件的重新渲染，所以开发者在编写代码时要对性能有足够的考虑。")]),t._v(" "),s("p",[t._v("​\t基于这种方案的优化方式就是对于不需要重新生成 vdom 的组件，通过 shouldComponentUpdate (React生命周期中的一个函数，用来判断组件是否需要重新渲染。其实类似的方法还有PureComponent和React.memo。)来跳过渲染。但是当应用的组件树特别大的时候，只是 shouldComponentUpdate 跳过部分组件渲染，依然可能计算量特别大。其实计算量主要产生在VDOM的Diff阶段，VDOM其实是一颗树状结构，在对比新旧VDOM树的时候会使用深度优先遍历，会阻塞用户的操作。所以React后来提出了Fiber架构来优化了这一问题......")]),t._v(" "),s("h2",{attrs:{id:"_3-react-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-hooks"}},[t._v("#")]),t._v(" 3. React Hooks")]),t._v(" "),s("h3",{attrs:{id:"_3-1-逻辑复用的难点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-逻辑复用的难点"}},[t._v("#")]),t._v(" 3.1 逻辑复用的难点")]),t._v(" "),s("p",[t._v("​\t框架除了解决上述的问题，其实还提供了代码封装和复用的方式。对前端来说，代码可以分为视图层(JSX)和逻辑层。视图的复用和封装很好理解，React和Vue都通过组件化的方式来封装页面视图，Vue中可以通过SFC的方式来将模板、样式和交互逻辑封装在一起，React也提供了类组件和函数组件的方式来定义组件。但是对于逻辑层的封装和复用，Vue和React都没有给出很好的解决方案。")]),t._v(" "),s("p",[t._v("​\tvue2 的组件是 option 对象的方式，那么逻辑复用方式很自然可以想到通过对象属性的 "),s("code",[t._v("mixin")]),t._v("，vue2 的组件内逻辑复用方案就是 mixin，但是 mixin 很难区分混入的属性、方法的来源，比较乱，代码维护性差。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mixin.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" mixin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("loading")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toggle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loading "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loading\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("​\tReact由于本身设计就基于函数式的思想，所以可以通过类似高阶函数的方式来复用组件的逻辑，这种方式称为"),s("code",[t._v("高阶组件（HOC）")]),t._v("——本质上就是一个高阶函数，接受一个组件作为参数，然后返回值是一个新的组件，可以在高阶函数中定义一些可复用的逻辑。")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 这个HOC的作用是切换模态框的开关状态\nconst Toggle = initial => WrappedComponent => {\n    return class extends Component {\n        // 在HOC中定义state以及toggle方法\n        constructor(props) {\n            this.state = {\n                on: props.initial\n            }\n        }\n        toggle = () => {\n            this.setState({\n                on: !this.state.on\n            })\n        }\n        render() {\n            // 通过props的形式传递给要使用该逻辑的组件\n            const newProps = {\n                ...this.props,\n                on: this.state.on,\n                toggle: this.toggle\n            }\n            return <WrappedComponent ...newProps />\n        }\n    }\n}\n")])])]),s("p",[t._v("​\t除了多加一层组件的 HOC 方式以外，还可以通过Render Props的方式来复用逻辑。Render Props即在props中传入render函数(并不是React中的render方法，只要是用于渲染内容的函数都可以)，告知组件需要渲染的内容。")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Toggle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            on: props.initial\n        };\n    }\n    toggle() {\n        this.setState({ on: !this.state.on })\n    }\n    render() {\n        return (\n        \t{ this.props.render(this.state, this.toggle) }\n        );\n    }\n}\n\n// 要使用Toggle逻辑的组件\n<Toggle render={(state, toggle) => (\n   <div onClick={toggle}>{state.on}</div>    \n)}/>\n")])])]),s("p",[t._v("​\t无论是render props还是HOC都没那么容易理解，更重要的是，这种逻辑复用的方式在依赖多个复用逻辑时会造成嵌套地狱(类似回调函数的嵌套地狱)的问题：")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function MyForm() {\n    return (\n        <Fetcher>\n            {data => (\n                <Actions>\n                    {actions => (\n                        <Translations> \n                            {translations => (\n                                <Style>\n                                    {styles => (\n                                        // ...\n                                    )}\n                                </Style>\n                            )}\n                        </Translations>\n                    )}\n                </Actions>\n            )}\n        </Fetcher>\n    )\n}\n")])])]),s("h3",{attrs:{id:"_3-2-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-hooks"}},[t._v("#")]),t._v(" 3.2 Hooks")]),t._v(" "),s("p",[t._v("​\t那么要怎么解决以上的问题呢？通过观察上面的代码，我们会发现都是基于类组件的方式来声明组件，这是因为React16.8之前只有类组件拥有状态，函数组件只能作为"),s("strong",[t._v("纯函数")]),t._v("(对于同一个参数，多次执行函数的结果都是相同的)使用。也就是说 function 组件是没有状态的，只是作为 class 组件渲染的辅助而存在。但是 HOC 的逻辑复用方式最终导致了组件嵌套太深，而且 class 内部生命周期比较多，逻辑都放在一起导致了组件比较大。")]),t._v(" "),s("p",[t._v("​\t怎么解决 class 组件嵌套深和组件大的问题呢？于是 react 团队就瞅准了 function 组件，能不能在 function 组件里面也支持 state，通过扩展一些 api 的方式来支持，也不是破坏性的更新。Hooks api 本质上都是函数，可以对 Hooks api 进一步封装成功能更强大的函数，也就是自定义 Hooks, 通过这种方式就可以做跨组件的逻辑复用了。")]),t._v(" "),s("p",[s("strong",[t._v("Hooks api 可以分为 3 类：")])]),t._v(" "),s("p",[t._v("第一类是数据类的：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("useState")]),t._v("：接收一个初始值，返回一个数组，数组里面分别是当前值和修改这个值的方法（类似 state 和 setState)")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("useMemo")]),t._v("：缓存函数计算的结果，在依赖数组变化后重新计算值")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("useCallback")]),t._v("：缓存函数，在依赖数组变化后重新执行函数，是 useMemo 在值为函数的场景下的简化 api，比如 useCallback(fn, [a,b]) 相当于 useMemo(() => fn, [a, b])")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("useReducer")]),t._v("：简单的状态管理（可以理解为管理多个state, 加强版的useState），接受Reducer函数和初始状态值作为参数，返回一个数据，数组中分别是当前的状态值和dispatch函数")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/f8992ccf3e9049e5a1407b6a51c98362.png",alt:"img"}})]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const myReducer = (state, action) => {\n    switch(action.type) {\n\t\tcase('add'):\n            return {\n\t\t\t\t...state,\n                count: state.count + 1\n            }\n    }\n}\nconst [state, dispatch] = useReducer(myReducer, { count: 0 });\ndispatch({ type: 'add' })\n")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("useRef")]),t._v("：用来维护一个对象，useRef返回一个形如 {current: 具体值} 的对象，因为对象的引用不变，只是 current 属性变了，所以不会引起组件重新渲染。此外，还可以用useRef来获取到DOM实例。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("useContext")]),t._v(":  用来在多个组件间共享状态, 利用useContext和useReducer我们就可以实现一个简单的Redux了")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const LoadingContext = React.createContext({});\n// APP组件\n<AppContext.Provider value={{\n  data: \'value\'\n}}>\n  <div className="App">\n    <Navbar/>\n  </div>\n</AppContext.Provider>\n\n// Navbar组件\nconst Navbar = () => {\n  const { data } = useContext(AppContext);\n  return (\n    <div className="navbar">\n      <p>{data}</p>\n    </div>\n  );\n}\n')])])])])]),t._v(" "),s("p",[t._v("第二类是逻辑类的：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("useEffect")]),t._v("：处理函数组件中的副作用(数据请求、监听函数)，"),s("code",[t._v("useEffect()")]),t._v("接受两个参数。第一个参数是一个函数，异步操作的代码放在里面。第二个参数是一个数组，用于给出 Effect 的依赖项，只要这个数组发生变化，"),s("code",[t._v("useEffect()")]),t._v("就会执行。第二个参数可以省略，这时每次组件渲染时，就会执行"),s("code",[t._v("useEffect()")]),t._v("。当第二个参数是空数组时，只会执行一次useEffect中的回调函数。当依赖 state 变化之后会再次执行，当组件销毁的时候会调用返回的清理函数。")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    useEffect(() => {\n        // 第一次渲染结束执行\n        const handleScroll = () => {}\n        window.addEventListener("scoll", handleScroll);\n        return () => {\n            // 组件卸载之前执行\n            window.removeEventListener("scoll", handleScroll);\n        }\n    }, []);\n')])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("useLayoutEffect")]),t._v("：在DOM更新完成后，浏览器绘制之前执行。useEffect是在浏览器绘制完成之后执行的。")])])]),t._v(" "),s("p",[t._v("这两个 hooks api 都是用于执行逻辑的，不需要等渲染完的逻辑都可以放到 useEffect 里。")]),t._v(" "),s("p",[t._v("​\t通过这 两类 hooks api，以及之后会添加的更多 hooks api ，函数组件里面也能做 state 的存储，也能在一些阶段执行一段逻辑，是可以替代 class 组件的方案了。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-最佳实践"}},[t._v("#")]),t._v(" 3.3 最佳实践")]),t._v(" "),s("p",[t._v("​\tHooks也不是万能的，它在解决Class组件带来的问题的同时也引入了新的问题。要了解Hooks的缺陷，最好的方法就是去Vue的官网。下面是Vue官网文档中关于Composition API和React Hooks对比的内容：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://picture-1305610595.cos.ap-guangzhou.myqcloud.com/202303142253867.png",alt:"image-20230314225315193"}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("React Hooks的闭包陷阱")]),t._v(" "),s("p",[t._v("我们先来看一段代码, 假如我们在1s内连续点击按钮10次会有什么结果。")]),t._v(" "),s("p",[t._v("https://codesandbox.io/s/hooks-d6fuvq?file=/src/App.js")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function App() {\n    const [ count, setCount ] = useState(0)\n    const increment = () => {\n        setTimeout(() => {\n            setCount(count + 1)\n        }, 1000)\n    }\n    return <h1 onClick={increment}>{count}</h1>\n}\n")])])]),s("p",[t._v("相信很多人都会本能地觉得页面上的数字会从0增长到10，然而真实的情况是页面上的数字只是从0增长到了1。我们再来看另外一段代码：")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class App extends Component {\n    state = {\n        count: 0\n    }\n    increment = () => {\n        setTimeout(() => {\n            this.setState({\n                count: this.state.count + 1\n            })\n        }, 1000)\n    }\n    render() {\n        return <h1 onClick={this.increment}>{this.state.count}</h1>\n    }\n}\n")])])]),s("p",[t._v("这段代码的结果是页面上的数字会从0增长到10。")]),t._v(" "),s("p",[t._v("https://codesandbox.io/s/nostalgic-christian-9js6mf?file=/src/App.js")]),t._v(" "),s("p",[t._v("之所以会产生这样的结果，其实与React Hooks的实现方式密切相关。在Class组件中，state是类的一个属性，setState方法的执行会引起类组件重新执行render函数，而increment函数中仍然可以通过this.state获取到最新的count值。而函数组件每次state的变化都会重新执行当前函数，那么React Hooks是如何保存state的呢？答案是通过闭包。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个简单的useState的实现，useState函数通过闭包保存了State")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" MyReact "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" _val "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在函数作用域内保存_val")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Comp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      Comp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Comp\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的state是一个闭包")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("initialValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      _val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" initialValue "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次执行都会赋值")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newVal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        _val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newVal\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继续 Demo 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Counter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyReact"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("click")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'render:'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" App\nApp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyReact"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Counter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// render: { count: 0 }")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于闭包的存在，可以更新state")]),t._v("\nApp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("click")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过重新渲染组件访问到新的state")]),t._v("\nApp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyReact"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Counter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// render: { count: 1 }")]),t._v("\n")])])]),s("p",[t._v("回到上面的例子， 其实setTimeout里面读取到的count读取到的都是初始值0，并不能获取到执行完setCount后的最新值。点击等待1s之后我们再次点击，发现count会从1增长到2，这是因为组件重新渲染，count变成了2。")]),t._v(" "),s("p",[t._v("我们可以通过使用useRef来维护一个对象，将count放在ref.current中, 这样就能获取到count的最新值。")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function App() {\n    const [ count, setCount ] = useState(0)\n    const ref = useRef(0)\n    const increment = () => {\n        setTimeout(() => {\n            setCount((ref.current += 1))\n        }, 1000)\n    }\n    return <h1 onClick={increment}>{count}</h1>\n}\n")])])])]),t._v(" "),s("li",[s("p",[t._v("useMemo和useCallback的正确使用")]),t._v(" "),s("p",[t._v("​\t其实React之所以提供给开发者useMemo和useCallback来手动优化性能，是因为它的渲染机制的问题，这点在2.3节中提到过。在类组件中，React提供了ShouldComponentUpdate、PureComponent生命周期来优化。在函数式组件中，我们可以通过useMemo来缓存一些复杂计算的结果，只有当依赖项变化时才会重新计算（类似Vue中的computed)。useCallback是用来缓存函数的，在React中我们常常需要给组件props中传入事件处理函数，最简单的方法是直接传一个箭头函数，然而这种匿名函数会导致不必要的渲染，这时就需要我们使用useCallback来包裹函数并指定依赖项。")]),t._v(" "),s("div",{staticClass:"language-react extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('function App() {\n    const [input, setInput] = useState("");\n    const onChange = useCallback((e) => {\n        setInput(e.target.value);\n    }, []);\n    return (\n    \t<Input value={inputValue} onChange={onChange}/>\n    )\n}\n// 配合React.memo\nconst Input = React.memo((props) => {});\n')])])])])]),t._v(" "),s("h2",{attrs:{id:"_4-react生态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-react生态"}},[t._v("#")]),t._v(" 4. React生态")]),t._v(" "),s("h3",{attrs:{id:"_3-1-redux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-redux"}},[t._v("#")]),t._v(" 3.1 Redux")]),t._v(" "),s("p",[t._v("https://redux.js.org/")]),t._v(" "),s("p",[t._v("状态管理库，配合redux-saga等中间件使用")]),t._v(" "),s("h3",{attrs:{id:"_3-2-ahooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-ahooks"}},[t._v("#")]),t._v(" 3.2 Ahooks")]),t._v(" "),s("p",[t._v("https://ahooks.js.org/zh-CN/")]),t._v(" "),s("p",[t._v("React Hooks库，封装了常用的自定义Hooks。如useRequest, 针对网络请求提供了自动请求/轮询/防抖/节流/错误重试/缓存等Hooks。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-cra、umi、nest-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-cra、umi、nest-js"}},[t._v("#")]),t._v(" 3.3 CRA、Umi、Nest.js")]),t._v(" "),s("p",[t._v("https://create-react-app.dev/")]),t._v(" "),s("p",[t._v("https://umijs.org/")]),t._v(" "),s("p",[t._v("https://nextjs.org/")]),t._v(" "),s("p",[t._v("一些常用的React脚手架。")]),t._v(" "),s("h3",{attrs:{id:"_3-4-react-router"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-react-router"}},[t._v("#")]),t._v(" 3.4 React-router")])])}),[],!1,null,null,null);a.default=e.exports}}]);