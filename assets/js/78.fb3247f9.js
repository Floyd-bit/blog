(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{676:function(t,s,a){"use strict";a.r(s);var n=a(11),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("解决连续子串/子数组问题, 并且注意滑动窗口要设计成"),a("strong",[t._v("左闭右开")]),t._v("区间, 这样在初始化时窗口内没有元素")])]),t._v(" "),a("h3",{attrs:{id:"_1-无重复字符的最长字串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-无重复字符的最长字串"}},[t._v("#")]),t._v(" 1. 无重复字符的最长字串")]),t._v(" "),a("p",[t._v("思路：声明一个数组表示滑动窗口，每次要向后滑动时先判断当前字符是否已在数组中存在，若存在则一直执行shift()直到不存在。设置一个变量max，每次改动判断是否更新max")]),t._v(" "),a("h3",{attrs:{id:"_2-长度最小的子数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-长度最小的子数组"}},[t._v("#")]),t._v(" 2. 长度最小的子数组")]),t._v(" "),a("p",[t._v("给定一个含有n个正整数的数组和一个正整数target。\n找出该数组中满足其和 >= target的长度最小的连续子数组，并返回长度")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("minSubArrayLen")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 滑动窗口")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            sum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            start"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        end"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-最小覆盖子串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-最小覆盖子串"}},[t._v("#")]),t._v(" 3. 最小覆盖子串")]),t._v(" "),a("p",[t._v("题目描述：给定一个字符串s，一个字符串t。返回s中包含t的所有字符的最小子串，如果s中不存在，则返回空字符串。")]),t._v(" "),a("p",[t._v("思路：使用滑动窗口，初始时窗口为空，先不断增大窗口直到包含子串，然后再缩小窗口直到不符合要求，重复以上步骤直到窗口到达s的末尾。实质上相当于先寻找"),a("strong",[t._v("可行解")]),t._v("，再优化可行解找到"),a("strong",[t._v("最优解")])]),t._v(" "),a("h3",{attrs:{id:"_4-字符串排列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-字符串排列"}},[t._v("#")]),t._v(" 4. 字符串排列")]),t._v(" "),a("p",[t._v("题目描述：给定两个字符串s1和s2，写一个函数来判断s2是否包含s1的排列。如果是返回true否则返回false。")]),t._v(" "),a("p",[t._v("思路：相当于固定长度的滑动窗口，当窗口长度小于s1时扩大窗口，当窗口长度大于等于s1且不满足条件时缩小窗口，直到窗口达到s2的末尾")]),t._v(" "),a("h3",{attrs:{id:"_5-字母异位词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-字母异位词"}},[t._v("#")]),t._v(" 5. 字母异位词")]),t._v(" "),a("p",[t._v("题目描述：给定两个字符串s和p, 找到s中所有p的"),a("strong",[t._v("异位词")]),t._v("的子串，返回这些子串的起始索引。(异位词指由相同字母排列形成的字符串)")]),t._v(" "),a("p",[t._v("思路：类似字符串排列的思想，只是需要在找到满足条件的子串时将索引存入结果数组中")])])}),[],!1,null,null,null);s.default=r.exports}}]);