(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{665:function(_,t,v){"use strict";v.r(t);var s=v(11),a=Object(s.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h3",{attrs:{id:"_1-线程与进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程与进程"}},[_._v("#")]),_._v(" 1. 线程与进程")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("进程是CPU资源分配的最小单位，线程是CPU调度的最小单位")])]),_._v(" "),v("li",[v("strong",[_._v("一个进程由一个或多个线程组成")])]),_._v(" "),v("li",[_._v("一个进程的内存空间是共享的，每个线程都可以用这些共享内存")]),_._v(" "),v("li",[_._v("进程之间的内容相互隔离")])]),_._v(" "),v("h3",{attrs:{id:"_2-进程间通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-进程间通信"}},[_._v("#")]),_._v(" 2. 进程间通信")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("信号量机制")]),_._v("，利用信号量实现进程间的互斥和同步")]),_._v(" "),v("li",[v("strong",[_._v("管道通信")]),_._v("，操作系统在内核中开辟一段缓冲区，进程在缓冲区内读写数据")]),_._v(" "),v("li",[v("strong",[_._v("消息队列通信")])]),_._v(" "),v("li",[v("strong",[_._v("共享内存通信")]),_._v("，映射一段能被其他进程访问的内存，多个进程可以访问统一块内存空间")])]),_._v(" "),v("h3",{attrs:{id:"_3-死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-死锁"}},[_._v("#")]),_._v(" 3. 死锁")]),_._v(" "),v("blockquote",[v("p",[_._v("死锁是指"),v("strong",[_._v("两个或两个以上的进程")]),_._v("在执行过程中，由于"),v("strong",[_._v("竞争资源")]),_._v("而造成阻塞的现象")])]),_._v(" "),v("p",[_._v("产生条件：")]),_._v(" "),v("ul",[v("li",[_._v("互斥条件： 涉及的资源是"),v("strong",[_._v("非共享")]),_._v("的")]),_._v(" "),v("li",[_._v("不剥夺条件：不能强行剥夺进程拥有的资源")]),_._v(" "),v("li",[_._v("请求和保持条件：进程在等待一个新资源时继续占有已分配的资源")])]),_._v(" "),v("h3",{attrs:{id:"_4-浏览器内核"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器内核"}},[_._v("#")]),_._v(" 4. 浏览器内核")]),_._v(" "),v("blockquote",[v("p",[_._v("浏览器内核是多线程的")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://picture-1305610595.cos.ap-guangzhou.myqcloud.com/202206041456291.webp",alt:"img"}})]),_._v(" "),v("ul",[v("li",[_._v("GUI渲染线程：解析HTML、CSS,构建DOM树，重绘和回流，与JS引擎线程互斥")]),_._v(" "),v("li",[_._v("JavaScript引擎线程")]),_._v(" "),v("li",[_._v("定时触发器线程：setTimeout setInterval")]),_._v(" "),v("li",[_._v("事件触发线程")]),_._v(" "),v("li",[_._v("异步HTTP请求线程")])]),_._v(" "),v("p",[v("strong",[_._v("浏览器的四种进程模式")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("Process-per-site-instance(默认): 同一个site-instance使用一个进程，打开一个tab访问a.baidu.com再打开一个tab访问b.baidu.com使用两个进程；在a.baidu.com页面中通过js代码打开了b.baidu.com的页面使用同一个进程")])]),_._v(" "),v("li",[v("p",[_._v("Process-per-site: 同一个site使用一个进程")])]),_._v(" "),v("li",[v("p",[_._v("Process-per-tab: 每个tab使用一个进程")])]),_._v(" "),v("li",[v("p",[_._v("SIngle process: 所有tab共用一个进程")])])]),_._v(" "),v("h3",{attrs:{id:"_5-event-loop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-event-loop"}},[_._v("#")]),_._v(" 5. Event Loop")]),_._v(" "),v("p",[_._v("浏览器事件循环：每个宏任务执行完后都去执行自己的微任务队列，在执行当前宏任务的过程中新增的微任务也在当前循环内被执行")]),_._v(" "),v("p",[_._v("Node事件循环：在执行当前宏任务过程中新增的微任务会在所有宏任务执行完成后执行")]),_._v(" "),v("h3",{attrs:{id:"_6-v8引擎运行js"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-v8引擎运行js"}},[_._v("#")]),_._v(" 6. V8引擎运行JS")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://picture-1305610595.cos.ap-guangzhou.myqcloud.com/202206041456292.webp",alt:""}})]),_._v(" "),v("ul",[v("li",[v("p",[v("mark",[_._v("js代码")]),_._v(" "),v("code",[_._v("<解析器>")]),_._v(" "),v("mark",[_._v("AST抽象语法树")]),_._v(" "),v("code",[_._v("<解释器>")]),_._v(" "),v("mark",[_._v(" 字节码 ")]),_._v(" "),v("code",[_._v("<编译器>")]),_._v(" "),v("mark",[_._v("机器码")])])]),_._v(" "),v("li",[v("p",[_._v("语法树的解析基本还是保持一致的；但在获得抽象语法树之后，V8引擎加入了解释器lgnition，语法树通过解释器lgnition生成了bytecode字节码，此时AST就被清除掉了，释放内存空间，生成的bytecode直接被解释器执行，同时生成的bytecode将作为基准执行模型，字节码更加简洁，生成的bytecode大小相当于等效的基准机器代码的25%到50%，在代码不断的运行过程中，解释器收集到了很多可以用来优化代码的信息，比如变量的类型，哪些函数执行的频率较高，这些信息被发送给编译器，V8引擎新的编译器TurboFan会根据这些信息和字节码，来编译出经过优化的机器代码")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);